#!/usr/bin/env bash

set -e

GETOPT_SPEC="\
  $(basename "$0") <options> <views>

See '$(basename "$0") help' for more help.

views: List the views to use. /regex/ or list-name. See '-l'.

Options:
--
h           Show the command summary
help        Browse the complete '$(basename "$0")' documentation
 
l,list      List the available views
g,grid      Attempt to display views in a grid layout
f,file=     Use a YAML file as starting input
t,testml=   Use a \$YAML_TEST_SUITE case as YAML input
c,compile   Compile yaml-editor before starting it
 
x,debug     Debug - Turn on Bash trace (set -x) output
"

ALL_VIEWS="\
 # | View Name         | YAML Framework    | Output Format
---+-------------------+-------------------+--------------
 1 | js-yaml.json      | JS/Node js-yaml   | JSON
 2 | libyaml.event     | libyaml           | Event Stream
 3 | libyaml.yaml      | libyaml           | YAML
 4 | java.json         | Java SnakeYAML    | JSON
 5 | nimyaml.event     | Nim NimYAML       | Event Stream
 6 | perl5-pm.pl       | Perl5 YAML.pm     | Perl Data
 7 | perl5-syck.pl     | Perl5 YAML::Syck  | Perl Data
 8 | perl5-tiny.pl     | Perl5 YAML::Tiny  | Perl Data
 9 | perl5-xs.pl       | Perl5 YAML::XS    | Perl Data
10 | perl5-pegex.event | Perl5 YAML::Pegex | Event Stream
11 | perl5-pp.event    | Perl5 YAML::PP    | Event Stream
12 | perl6.json        | Perl6 YAMLish     | JSON
13 | perl6.p6          | Perl6 YAMLish     | Perl6 Data
14 | pyyaml.event      | Python pyyaml     | Event Stream
15 | pyyaml.py         | Python pyyaml     | Python Data
16 | ref.yeast         | Reference Parser  | YEAST Events
17 | ruby.json         | Ruby psych        | JSON
"

all_views=($(echo "$ALL_VIEWS" | perl -nle 'print $1 if /([-\w]+\.\w+)/'))

: ${YAML_EDITOR_ROOT:=$(cd $(dirname $BASH_SOURCE)/..; pwd)}
export PATH="${YAML_EDITOR_ROOT:?}/lib:$PATH"
source "$YAML_EDITOR_ROOT/lib/bash+.bash"
bash+:import :std can
use GetOpt

if [[ -z $YAML_TEST_SUITE ]]; then
  if [[ -d ../yaml-test-suite ]]; then
    export YAML_TEST_SUITE="$(dirname $PWD)/yaml-test-suite"
  elif [[ -f ./test/229Q.tml ]]; then
    export YAML_TEST_SUITE=$PWD
  fi
fi

main() {
  file=input.yaml
  if [[ $(uname) == Darwin ]]; then
    uid=$(stat -f%u $0)
    gid=$(stat -f%g $0)
  else
    uid=$(stat -c%u $0)
    gid=$(stat -c%g $0)
  fi

  get-options "$@"

  if $option_list; then
    list-all
  elif [[ ! -e /.dockerenv ]]; then
    docker-run "$@"
  elif [[ $command == RUN ]]; then
    "run-all"
  elif [[ $command == TESTML ]]; then
    "show-tml"
  elif [[ $command == SAVE ]]; then
    "save-tml"
  else
    "editor-start"
  fi
}

list-all() {
  echo "$ALL_VIEWS"
}

docker-run() {
  if $option_compile; then
    (
      cd $YAML_EDITOR_ROOT
      make
    )
  fi

  root=$(cd "$(dirname "$0")/.."; pwd)
  work=$(mktemp -d /tmp/XXXXXXXXXXXXXXXX)

  if [[ -n $option_file ]]; then
    [[ -f $option_file ]] ||
      die "Input file does not exist '$option_file'"
    cp $option_file $work/$file
  else
    cat <<'...' > $work/$file
foo: bar

# Press enter to render.
# Press \h for help (more commands).
# Press \c to clear the input.
# Press \q to quit.
...
  fi

  mount_suite=''
  if [[ -n $YAML_TEST_SUITE ]]; then
    [[ -e $YAML_TEST_SUITE/test/229Q.tml ]] ||
      die "YAML_TEST_SUITE='$YAML_TEST_SUITE' seems to be invalid"
    mount_suite="-v $YAML_TEST_SUITE/test:/suite"
  fi

  docker run --rm -it \
    -v "$work":/yaml \
    -v "$root":/yaml-editor \
    $mount_suite \
    yamlio/yaml-editor \
    yaml-editor "$@"

  echo "Files saved in '$work'"
}

editor-start() {
  get-views
  get-yaml

  cp /yaml-editor/share/vimrc .vimrc
  cp /yaml-editor/share/help help

  for view in "${views[@]}"; do
    touch $view
  done

  chown -R "$uid.$gid" .

  sleep .2
  if $default_views; then
    vim -c 'source .vimrc' -c "sbuffer ." $file . -O
  else
    vims $file ${views[@]} -- -c 'source .vimrc' -c 'sbuffer input.yaml' -c 'wincmd H'
  fi
}

get-yaml() {
  [[ -n $option_testml ]] || return 0

  [[ $option_testml =~ ^[A-Z0-9]{4}$ ]] ||
    die "Invalid TestML id '$option_testml'"
  if [[ -d /suite ]]; then
    suite=/suite
  elif [[ -n $YAML_TEST_SUITE ]]; then
    suite=$YAML_TEST_SUITE/test
  else
    die "Can't use --testml without YAML_TEST_SUITE variable"
  fi
  [[ -f $suite/229Q.tml ]] ||
    die "Invalid YAML_TEST_SUITE specified"
  testml="$suite/$option_testml.tml"
  [[ -f $testml ]] ||
    die "No test file '$testml' found"
  yaml=$(
    cat $testml | perl -p0 \
      -e 's/.*\n\+\+\+\ +in-yaml\n//s;' \
      -e 's/^\+\+\+.*//ms;' \
      -e 's/^\\//mg;'
  )
  echo "$yaml" > $file
}

run-all() {
  for view in *.*; do
    if [[ $view =~ ^input\.yaml$ ]]; then
      continue
    fi
    filter="${view/\./-}"
    cat $file | $filter &> $view || true
  done
}

save-tml() {
  local dir=
  [[ -e /suite ]] && dir=/suite || dir=.
  while true; do
    id="$(
      cat /dev/urandom |
      LC_ALL=C tr -cd A-HJ-NP-Z2-9 |
      fold -w4 |
      grep [A-Z] |
      grep [0-9] |
      head -n1
    )"
    file="$dir/$id.tml"
    [[ -e "$file" ]] || break
  done

  make-tml
  echo "$tml" > "$file"
  chown "$uid.$gid" "$file"
  echo $file
}

show-tml() {
  make-tml
  echo "$tml" > TEST.tml
  echo TEST.tml
}

make-tml() {
  touch libyaml.yaml js-yaml.json libyaml.event
  run-all
  tml="\
=== <label goes here>
from: <Source URL or description>
tags: <tag,words,separated,by,commas>

+++ in-yaml
$(tml input.yaml)
"
  libyaml=$(tml libyaml.event)
  if [[ $libyaml =~ (^|$'\n')[^\+\-\=] ]]; then
    tml+="
+++ error
"
  else
    tml+="
+++ out-yaml
$(tml libyaml.yaml)

+++ in-json
$(tml js-yaml.json)

+++ test-event
$(tml libyaml.event)
"
  fi
}

get-views() {
  views=()
  default_views=false
  if [[ ${#view_spec[@]} -eq 0 ]]; then
    views=("${all_views[@]}")
    if ! $option_grid; then
      default_views=true
      return
    fi
  fi

  for view in "${view_spec[@]}"; do
    if [[ $view == / ]]; then
      views+=("$view")
    elif [[ $view =~ ^[0-9]+$ ]]; then
      if [[ $view -lt 1 || $view -gt ${#all_views[@]} ]]; then
        die "Invalid view number '$view'"
      fi
      views+=(${all_views[$((view - 1))]})
    elif [[ $view =~ ^/ ]]; then
      regex=${view#/}
      regex=${regex%/}
      for v in ${all_views[@]}; do
        if [[ $v =~ $regex ]]; then
          views+=($v)
        fi
      done
      [[ ${#views[@]} -gt 0 ]] ||
        die "No views match '$regex'"
    else
      check-view "$view"
      views+=("$view")
    fi
  done

  views2=()
  for view in "${views[@]}"; do
    [[ $view == / ]] || views2+=("$view")
  done
  total=${#views2[@]}
  [[ $total -gt 0 ]] || die "Invalid usage\n"

  $option_grid || return 0

  cols=(- 1 2 3 2 3 3 3 3 3 4 4 4 5 5 5 5 5 5 5 5)
  col=${cols[$total]}
  n=0
  views=()
  for view in "${views2[@]}"; do
    if [[ $n -ge $col ]]; then
      views+=(/)
      n=0
    fi
    views+=("$view")
    : $((n++))
  done
}

check-view() {
  ok=false
  for v in ${all_views[@]}; do
    if [[ $v == "$view" ]]; then
      ok=true
      break
    fi
  done
  if ! $ok; then
    die "Invalid view '$view'. Try --list."
  fi
}

get-options() {
  GETOPT_ARGS='@arguments' \
  GETOPT_DEFAULT_HELP=false \
    getopt "$@"
  if [[ $arguments =~ ^RUN|SAVE|TESTML$ ]]; then
    command="$arguments"
  else
    view_spec=("${arguments[@]}")
  fi
  $option_debug && set -x
  $option_help && exit 0
  true
}

tml() {
  cat $1 | perl -pe 's/^(\s+$|%|#)/\\$1/'
}

[[ $0 != "$BASH_SOURCE" ]] || main "$@"
